{
	"name": "flas",
	"scopeName": "source.flas",
	"patterns": [
		{ "include": "#invalid-indent" },
		{ "include": "#literate-comment" },
		{ "include": "#intro-contract" },
		{ "include": "#intro-card" }
	],
	"repository" : {
		"invalid-indent": {
			"name": "invalid.indent",
			"match": "^ .*$"
		},
		"literate-comment": {
			"name": "comment.block.literate",
			"match": "^[^\\s].*$"
		},
		"line-comment": {
			"name": "comment.line.double-slash",
			"match": "//.*$"
		},
		"intro-contract": {
			"name": "meta.contract",
			"begin": "^\t(contract)\\b",
			"end": "(?=^\t[^\t ])",
			"beginCaptures": {
				"1": { "name": "keyword.intro" },
				"2": { "name": "entity.name.type" }
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#simple-type" },
				{ "include": "#method-decl" }
			]
		},
		"method-decl": {
			"name": "meta.method.decl",
			"begin": "^\t\t([a-z][A-Za-z0-9]*)\\b",
			"end": "(?=^\t\t?[^\t ])",
			"beginCaptures": {
				"1": { "name": "entity.name.function" }
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#type-pattern" }
			]
		},
		"intro-card": {
			"name": "meta.card",
			"begin": "^\t(card)\\s+([A-Z][A-Za-z0-9]+)\\s*(//.*)?$",
			"end": "(?=^\t[^\t ])",
			"beginCaptures": {
				"1": { "name": "keyword.intro" },
				"2": { "name": "entity.name.type" }
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#state-defn" },
				{ "include": "#implements-defn" }
			]
		},
		"state-defn": {
			"name": "meta.card.state",
			"begin": "^\t\t(state)\\s*(//.*)?$",
			"end": "(?=^\t\t?[^\t ])",
			"beginCaptures": {
				"1": { "name": "keyword.intro" }
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment"},
				{ "include": "#line-comment"},
				{ "include": "#field-defn"}
			]
		},
		"field-defn": {
			"name": "meta.card.state.field",
			"begin": "^\t\t\t(?!\t)",
			"end": "(?=^\t\t?\t?[^\t ])",
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#continuation" },
				{ "include": "#type-reference"},
				{ "include": "#variable-name" },
				{ "include": "#field-assign" }
			]
		},
		"continuation": {
			"name": "meta.continuation",
			"match": "^\t+(\\s+)"
		},
		"field-assign": {
			"name": "meta.expression",
			"begin": "<-",
			"end": "(?=^\t\t?\t?[^\t ])",
			"beginCaptures": {
				"1": { "name": "entity.name.function" }
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#number" }
			]
		},
		"implements-defn": {
			"name": "meta.card.implements",
			"begin": "^\t\t(implements)\\s+(([a-z][a-zA-Z0-9]+\\.)*[A-Z][A-Za-z0-9]+)\\s*(//.*)?$",
			"end": "(?=^\t\t?[^\t ])",
			"beginCaptures": {
				"1": { "name": "keyword.intro" },
				"2": { "name": "entity.name.type" },
				"3": { "name": "comment.line.double-slash"}
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#method-defn" }
			]
		},
		"method-defn": {
			"name": "meta.method.defn",
			"begin": "^\t\t\t([a-z][A-Za-z0-9]*)\\b",
			"end": "(?=^\t\t?\t?[^\t ])",
			"beginCaptures": {
				"1": { "name": "entity.name.function" }
			},
			"patterns": [
				{ "include": "#invalid-indent" },
				{ "include": "#literate-comment" },
				{ "include": "#line-comment"},
				{ "include": "#variable-name" },
				{ "include": "#number" },
				{ "include": "#type-reference" },
				{ "include": "#handler-defn"}
			]
		},


		"type-pattern": {
			"name": "meta.pattern.type",
			"match": "\\([^()]+\\)",
			"patterns": [
				{ "include": "#type-reference" },
				{ "include": "#variable-name" }
			]
		},
		"number": {
			"name": "constant.numeric",
			"match": "[0-9]+"
		},
		"simple-type": {
			"name": "entity.name.type",
			"match": "\\b[A-Z][A-Za-z0-9]+\\b"
		},
		"type-reference": {
			"name": "entity.name.type",
			"match": "\\b([a-z][a-zA-Z0-9]+\\.)*[A-Z][A-Za-z0-9]+\\b"
		},
		"variable-name": {
			"name": "variable.parameter",
			"match": "\\b[a-z][a-zA-Z0-9]*\\b"
		}
	}
}
